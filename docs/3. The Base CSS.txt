====================
3.1 The Grid System
====================

This system it's mobile first - starts off as a fluid grid system with each column stacking on top of one another. And as the viewport size increases it will scale up to 12 columns

-- 3.1.1 How the grid works --

1.
Start with a <div class='container'> 

2.
The columns must be wrapped in a row element <div class='row'>
Depending on the layout it's needed for the page you will use a certain number of columns for each section. 

3. 
Divide the page in two areas similar:
<div class='col-lg-6'></div>
<div class='col-lg-6'></div>

The -lg-  represent for large devices such as desktops.

The column system goes from 0 - 12 and it's possible to divide, some examples:
3 - 9  (col-lg-3 - col-lg-9)
4 - 8  (col-lg-4 - col-lg-8)
5 - 7  (col-lg-5 - col-lg-7)
6 - 6  (col-lg-6 - col-lg-6)
2 - 2 - 8 (col-lg-2 - col-lg-2 - col-lg-8)
4 - 4 - 2 - 2 (col-lg-4 - col-lg-4 - col-lg-2 - col-lg-2)
etc..

The grid has a fixed width, and that width is given by the container class. 

4. 
Adding a fluid grid to the container class
<div class='container-fluid'>
This is how it's created a fluid grid system.

-- 3.1.2. Offset columns -- 

1.
Create another <div class='row'> with another <div class='col-lg-2'>.

2.
To move two columns to the right we type in front of the number of columns col-lg-offset-2. And creste a new offset of 8.
Like:
<div class='col-lg-2 col-lg-offset-2'>
<div class='col-lg-offset-8'>

-- 3.1.3 Nesting grids --

Inside a column we can put another row.

1. 
We create a <div class='row'> with two columns of 6 called col-lg-6 level 1.

2. Inside the first <div class='col-lg-6> we create another row with another two classes of columns.
Like:
<div class='row'>
	<div class='col-lg-6'>Level 1
		<div class='row'>
			<div class='col-lg-4'>Level 2</div>
			<div class='col-lg-8'>Level 2</div>
		</div>
	</div>
	<div class='col-lg-6'>Level 1</div>
</div>

The nested one only expand till 6 columns. It's like a small grid of 12 columns inside the parent that have 6 columns.

-- 3.1.4. Syntax --

col - Represents to bootstrap the grid columns.
x number - number of columns
lg - viewport size

Because the grid is responsive:
lg - large desktops 
md - medium size devices
sm - small devices (like tablets)
sx - extra small devices (smartphones)

-- 3.1.5. Viewport --

At 1200px there is a breakpoint. But if we want to maintain the same column size.
Just go to the class='col-lg-x' and add col-md-x
Like:
<div class='col-lg-2 col-md-2'>
So when the viewport its smaller it keeps the columns same size.

It's not needed the columns have the came size. They can have another ones, like: 
<div class='col-lg-2 col-md-4'>

But you're going to use the exact same number of columns, the -lg- size it's not needed. So:
<div class='col-md-4'> - It means that on medium and large desktops, I'm going to use this column configuration.
<div class='col-xs-4'> - On extra small, small, medium and large, use this configuration. 

Aloows to create various layouts depending on which device you're viewing the website on. 

=====================
3.2 Buttons and Icons
=====================

-- 3.2.1 Buttons --

Bootstrap offers a lot of options for buttons:
- styles
- sizes

1.
Create a <div class='container'>

For the button we add a class of btn.
<a href="" class='btn'>simple button</a>

For the button default we add btn-default
<a href="" class='btn btn-default'>simple button</a>

2. 
Create diferent colors.
.btn-default - whitout styles
.btn-primary - blue button
.btn-success - green 
.btn-info - light blue
.btn-warning - orange
.btn-danger - red
.btn-link - look like a link

3.
Make a call area
We can combine buttons to make a call of action area:
<a href='' class='btn btn-primary'>Buy it Now</a>
<a href='' class='btn btn-link'>Get free Trial</a>

4.
Different sizes
.btn-lg - large
.btn-md - medium
.btn-sm - small
.btn-xs - extra small

5.
Block element
We can create a block level element out of any button - it will span the full width of its parent
.btn-block

6.
Tags we can use:
- anchor tags 
- button tags
- input type submit

-- 3.2.2 Icons --

http://getbootstrap.com/components/

Replace the icons with a icon font.
In the class we add a glyphicon and the name of the icon we want.
<span class='glyphicon glyphicon-search'></span>

We can:
- Scale/Resize
- Color
- Add to a button


==================
3.3 Form Controls
==================

lesson_4.html

https://v4-alpha.getbootstrap.com/components/forms/

-- 3.3.1 Default form --

1. 
Add a container then start with a simple component form and add a role equals form to help with accessebility.
<form action='' role='form'></form>

2. 
Every elements along with its labels should be included in a div with a class of .from-group
- ensure proper space between this elements 
<div class='form-group'>

3. 
Inside the from-group 
- label and input
<label for='form-elem-1'>This is a label</label><input type="text" id='form-elem-1' class='form-control'>

In the label 
for='form-elem-1'

In the input 
type='text'
id='form-elem-1'
class='form-control'

By default every element with a class of form-control has a width of 100% but it's possible to alter this. 

-- 3.3.2 Help Block --

Help users guide through the form.
<p class='help-block'>

-- 3.3.3 Inline form --

Elements on the same line. 
Instead of labels you would have screen reader only labels.

1.  
Create another form but this time with a class form-inline
<form action='' role='form' class='form-inline'>

2.
Then the same as above:
- div with a class of form-group
- label
- input
But this time in the label we add a class sr-only that means screen reader only.
<label for='form-elem-4' class='sr-only'>Second inline form label</label> 

3. 
Add placeholders, since  we no longer have labels these are needs to know what he needs to add in there. 
<input type="password" id='form-elem-4' class='form-control' placeholder='Password'>

4. 
We can add a submmit button.
<button type='submit' class='btn btn-default'>Sign in</button>

Or a checkbox:
<div class='checkbox'>
     <label for=''><input type="checkbox">Remember me</label>
</div>

-- 3.3.4. Horizontal Form --

For the horizontal form use the class form-horizontal
<form action='' role='form' class='form-horizontal'>

-- 3.3.5. Size of the Input -- 

Use the column system to control the width
<div class="row">
    <div class="col-xs-2">
        <input type="text" class="form-control" placeholder=".col-xs-2">
     </div>
</div>

Use input-x to control the size
.input-lg
.input-md
.input-sm
.intput-xs

-- 3.3.6 Validation States -- 

Bootstrap includes vaidation styles for:
- error
- warning
- success

To use it's needed to add the following classes to the parent elements
.has-warning
.has-error
.has-success
Ex.
<div class='form-group has-warning'>

To control the colors on the labels we have to create a class on the label.
.control-label
Ex. 
<label for='form-elem-10' class="control-label">This is a label</label>

-- 3.3.7 Add icons --

On the parent group we have to add a class
.has-feedback
<div class='form-group has-warning has-feedback'>
In the end of the input put a span
<span class='glyphicon glyphicon-warning-sign form-control-feedback'></span> 

warning - glyphicon-warning-sign
error - glyphicon-remove
success - glyphicon-ok